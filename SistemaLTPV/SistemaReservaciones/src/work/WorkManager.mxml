<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%">

	<mx:MenuBar id="MainMenu" dataProvider="{_menuCollection}" x="0" y="0" width="100%" labelField="@label" itemClick="menuHandler(event);"/>
	<mx:SWFLoader source="assets/logo.swf" right="10" top="30" height="76"/>
	
	<mx:Script>
        <![CDATA[
        	import mx.containers.TitleWindow;
        	import views.TarjetaCredito;
        	import mx.events.CloseEvent;
        	import flash.utils.getDefinitionByName;
        	import mx.com.latranquila.controller.Reservations;
        	import mx.com.latranquila.controller.Units;
        	import mx.com.latranquila.controller.Persons;
        	import mx.com.latranquila.auth.MenuRoleFilter;
        	import mx.controls.Menu;
        	import mx.collections.XMLListCollection;
        	import mx.rpc.events.FaultEvent;
        	import mx.rpc.events.ResultEvent;
        	import mx.core.IFlexDisplayObject;
        	import mx.com.latranquila.web.WebApplication;
        	import mx.rpc.remoting.RemoteObject;
        	import mx.events.MenuEvent;
        	import mx.collections.ArrayCollection;
        	import modulos.*;
            import mx.managers.PopUpManager;
            
            protected var _webApplication:WebApplication;
            protected var _configXML:XML;
            
			protected var _persons:Persons;
			protected var _reservations:Reservations;
			protected var _units:Units;
			
			protected var _openWindows:Object = new Object();
            
            [Bindable]
            protected var _menuCollection:XMLListCollection;
            // for testing
			private var _reservationsRO:RemoteObject;
           	
			public function set context(contextObj:Object):void{
				for( var p:String in contextObj){
					if(this.hasOwnProperty(p)){
						this[p] = contextObj[p];
					}
				}
			}
            
			public function set persons(value:Persons):void{
				_persons = value;
			}
			public function set units(value:Units):void{
				_units = value;
			}
			public function set reservations(value:Reservations):void{
				_reservations = value;
				_reservations.getReservations();
			}            
            
            public function set webApplication(value:WebApplication):void{
            	_webApplication = value;
            }
            
            public function set configXML(value:XML):void{
            	_configXML = value;
            }
            
            public function logout(event:MenuEvent=null):void{
            	_webApplication.logout();
            }            
            
            public function enterState():void{
            	var filteredList:XMLList = MenuRoleFilter.filterMenuItemXMLList(_configXML.navMenu.menuitem, _webApplication.user);
            	_menuCollection = new XMLListCollection(filteredList);
            }
            
            public function exitState():void{
            	_menuCollection = new XMLListCollection();
            }
            
            
            protected function menuHandler(event:MenuEvent):void {	
            	if(event.item.@method != ""){
            		this[event.item.@method](event);
            	}
            }
            
            protected function  openPopup(event:MenuEvent):void{
            	if(event.item.@data !=0){
            		if(!_openWindows.hasOwnProperty(event.item.@className)){
        				var pop:TitleWindow = PopUpManager.createPopUp(this, getDefinitionByName("views." + event.item.@className) as Class, false) as TitleWindow;
        				pop.name = event.item.@className;
        				PopUpManager.centerPopUp(pop);
        				pop.addEventListener(CloseEvent.CLOSE, closePopup);
        				_openWindows[event.item.@className] = pop;
        				
        				if(pop.hasOwnProperty("context")){
        					var popupContext:Object = {
								persons: _persons,
								reservations: _reservations,
								units: _units
							}
        					
        					Object(pop).context = popupContext;
        				}
            		}
            	}
            }
            
            protected function closePopup(event:CloseEvent):void{
            	var pop:TitleWindow = event.target as TitleWindow;
            	if(_openWindows.hasOwnProperty(pop.name)){
	            	PopUpManager.removePopUp(_openWindows[pop.name]);
	            	delete _openWindows[pop.name]
            	}
            }
            
            

         ]]>
    </mx:Script>
	
</mx:Canvas>
